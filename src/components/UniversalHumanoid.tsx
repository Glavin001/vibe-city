/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/AnimationLibrary_Godot_Standard.glb --transform --types --output src/components/UniversalHumanoid.tsx 
Files: public/models/AnimationLibrary_Godot_Standard.glb [6.67MB] > /Users/glavin/Development/vibe-city2/src/components/AnimationLibrary_Godot_Standard-transformed.glb [2.18MB] (67%)
*/

import type * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { SkeletonUtils } from 'three-stdlib'

export type ActionName = 'A_TPose' | 'Crouch_Fwd_Loop' | 'Crouch_Idle_Loop' | 'Dance_Loop' | 'Death01' | 'Driving_Loop' | 'Fixing_Kneeling' | 'Hit_Chest' | 'Hit_Head' | 'Idle_Loop' | 'Idle_Talking_Loop' | 'Idle_Torch_Loop' | 'Interact' | 'Jog_Fwd_Loop' | 'Jump_Land' | 'Jump_Loop' | 'Jump_Start' | 'PickUp_Table' | 'Pistol_Aim_Down' | 'Pistol_Aim_Neutral' | 'Pistol_Aim_Up' | 'Pistol_Idle_Loop' | 'Pistol_Reload' | 'Pistol_Shoot' | 'Punch_Cross' | 'Punch_Enter' | 'Punch_Jab' | 'Push_Loop' | 'Roll' | 'Roll_RM' | 'Sitting_Enter' | 'Sitting_Exit' | 'Sitting_Idle_Loop' | 'Sitting_Talking_Loop' | 'Spell_Simple_Enter' | 'Spell_Simple_Exit' | 'Spell_Simple_Idle_Loop' | 'Spell_Simple_Shoot' | 'Sprint_Loop' | 'Swim_Fwd_Loop' | 'Swim_Idle_Loop' | 'Sword_Attack' | 'Sword_Attack_RM' | 'Sword_Idle' | 'Walk_Formal_Loop' | 'Walk_Loop'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Mannequin_1: THREE.SkinnedMesh
    Mannequin_2: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    M_Main: THREE.MeshStandardMaterial
    M_Joints: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: React.JSX.IntrinsicElements['group'] & { onActionsReady?: (actions: Record<ActionName, THREE.AnimationAction | null>) => void }) {
  const { onActionsReady, ...groupProps } = props
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/models/AnimationLibrary_Godot_Standard-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  const { actions } = useAnimations(animations, group)

  React.useEffect(() => {
    if (onActionsReady && actions) {
      onActionsReady(actions as Record<ActionName, THREE.AnimationAction | null>)
    }
  }, [actions, onActionsReady])

  return (
    <group ref={group} {...groupProps} dispose={null}>
      <group name="Scene">
        <group name="Rig">
          <primitive object={nodes.root} />
        </group>
        <group name="Mannequin">
          <skinnedMesh name="Mannequin_1" geometry={nodes.Mannequin_1.geometry} material={materials.M_Main} skeleton={nodes.Mannequin_1.skeleton} />
          <skinnedMesh name="Mannequin_2" geometry={nodes.Mannequin_2.geometry} material={materials.M_Joints} skeleton={nodes.Mannequin_2.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/AnimationLibrary_Godot_Standard-transformed.glb')
